package br.com.coldigogeladeiras.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import com.google.gson.JsonObject;

import java.util.ArrayList;
import br.com.coldigogeladeiras.jdbcinterface.MarcaDAO;
import br.com.coldigogeladeiras.modelo.Marca;

// Classe que implementa a interface MarcaDAO para operações de banco de dados com a tabela "marcas".
public class JDBCMarcaDAO implements MarcaDAO {
    
    private Connection conexao;
    
    // Construtor que recebe uma conexão com o banco de dados
    public JDBCMarcaDAO(Connection conexao) {
        this.conexao = conexao;
    }

    // Método para buscar todas as marcas ativas (status = 1) no banco de dados
    public List<Marca> buscar(){
        String comando = "SELECT * FROM marcas WHERE status = 1";
        
        List<Marca> listMarcas = new ArrayList<Marca>();
        
        Marca marca = null;
        
        try {
            Statement stmt = conexao.createStatement();
            ResultSet rs = stmt.executeQuery(comando);
            
            // Itera por cada linha do resultado para criar objetos Marca
            while(rs.next()) {
                marca = new Marca();
                
                int id = rs.getInt("id");
                String nome = rs.getString("nome");
                int status = rs.getInt("status");
                
                marca.setId(id);
                marca.setNome(nome);
                marca.setStatus(status);
                
                listMarcas.add(marca);
            }
        }catch (Exception ex){
            ex.printStackTrace();            
        }
        
        return listMarcas;
    }
    
    // Método para inserir uma nova marca no banco de dados
    public boolean inserir(Marca marca) {
        
        String comando = "INSERT INTO marcas (id, nome) VALUES (?,?)";
        PreparedStatement p;
        
        try {
            p = this.conexao.prepareStatement(comando);
            p.setInt(1, marca.getId());
            p.setString(2, marca.getNome());
            p.execute();
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
        return true;
        
    }
    
    // Método para buscar marcas pelo nome, retornando uma lista de objetos JSON
    public List<JsonObject> buscarPorNome(String nome){
        
        String comando = "SELECT * FROM marcas ";
        if(!nome.equals("")) {
            comando += "WHERE nome LIKE '%" + nome + "%' ";
        }
        comando += "ORDER BY nome ASC";
        
        List<JsonObject> listaMarcas = new ArrayList<JsonObject>();
        JsonObject marca = null;
        
        try {
            Statement stmt = conexao.createStatement();
            ResultSet rs = stmt.executeQuery(comando);
            
            while(rs.next()) {
                int id = rs.getInt("id");
                String nomeMarca = rs.getString("nome");
                
                marca = new JsonObject();
                marca.addProperty("id", id);
                marca.addProperty("nome", nomeMarca);
                
                listaMarcas.add(marca);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        
        return listaMarcas;
    }
    
    // Método para deletar uma marca pelo ID
    public boolean deletar (int id) {
        
        String comando = "DELETE FROM marcas WHERE id = ?";
        PreparedStatement p;
        try {
            p = this.conexao.prepareStatement(comando);
            p.setInt(1, id);
            p.execute();
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
    
    // Método para buscar uma marca específica pelo ID
    public Marca buscarPorId(int id) {
        String comando = "SELECT * FROM marcas WHERE marcas.id = ?";
        Marca marca = new Marca();
        try {
            PreparedStatement p = this.conexao.prepareStatement(comando);
            p.setInt(1, id);
            ResultSet rs = p.executeQuery();
            while (rs.next()) {
                String nome = rs.getString("nome");
                
                marca.setId(id);
                marca.setNome(nome);
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        return marca;
    }
    
    // Método para atualizar o nome de uma marca existente
    public boolean alterar(Marca marca) {
        String comando = "UPDATE marcas SET nome=? WHERE id=?";
        PreparedStatement p;
        try {
            p = this.conexao.prepareStatement(comando);
            p.setString(1, marca.getNome());
            p.setInt(2, marca.getId());
            p.executeUpdate();
        }catch(SQLException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
    
    // Método para verificar se há produtos associados a uma marca específica
    public boolean verificaProduto (int id) {
        String comando = "SELECT p.*, m.nome as marca FROM produtos p INNER JOIN marcas m ON p.marcas_id = m.id WHERE marcas_id=?";
        boolean retorno = false;
        try {
            PreparedStatement p = this.conexao.prepareStatement(comando);
            p.setInt(1, id);
            ResultSet rs = p.executeQuery();
            
            if(!rs.next()) {
                retorno = true;
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        return retorno;
    }
    
    // Método para alternar o status de uma marca entre ativo (1) e inativo (0)
    public int alterarStatus(int id) {
        
        String comandoConsulta = "SELECT status FROM marcas WHERE id = ?";
        int status = 0;
        try {
            PreparedStatement p = this.conexao.prepareStatement(comandoConsulta);
            p.setInt(1, id);
            ResultSet rs = p.executeQuery();
            while(rs.next()) {
                status = rs.getInt("status");
            }
            if(status == 1) {
                status = 0;
            }else {
                status = 1;
            }
            String comandoEdicao = "UPDATE marcas SET status=? WHERE id=?";
            
            try {
                PreparedStatement ps = this.conexao.prepareStatement(comandoEdicao);
                ps.setInt(1, status);
                ps.setInt(2, id);
                ps.executeUpdate();
            }catch(Exception e) {
                e.printStackTrace();
                return 2;
            }
        }catch(Exception e) {
            e.printStackTrace();
            return 2;
        }
        return status;
    }
    
    // Método para verificar se uma marca com um dado nome já está cadastrada
    public boolean verificaMarcaCadastrada(String nome) {
        
        String comando = "SELECT nome FROM marcas WHERE nome = ?";
        boolean retorno = false;
        try {
            PreparedStatement p = this.conexao.prepareStatement(comando);
            p.setString(1, nome);
            ResultSet rs = p.executeQuery();
            if(rs.next()) {
                retorno = true;
            }
        }catch(Exception e) {
            e.printStackTrace();
        }
        return retorno;
    }
    
}
