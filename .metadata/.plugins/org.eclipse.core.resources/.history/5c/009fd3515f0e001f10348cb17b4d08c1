package br.com.coldigogeladeiras.rest;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.DELETE;
import javax.ws.rs.PathParam;
import javax.ws.rs.PUT;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

import br.com.coldigogeladeiras.bd.Conexao;
import br.com.coldigogeladeiras.jdbc.JDBCProdutoDAO;
import br.com.coldigogeladeiras.modelo.Produto;

//Classe responsável por responder às requisições HTTP relacionadas a produtos.
@Path("produto")
public class ProdutoRest extends UtilRest{

 // Método para inserir um novo produto no banco de dados.
 @POST
 @Path("/inserir")
 @Consumes("application/*")
 public Response inserir(String produtoParam) {
     try {
         // Converte o parâmetro JSON recebido em um objeto Produto.
         Produto produto = new Gson().fromJson(produtoParam, Produto.class);
         
         // Estabelece conexão com o banco de dados.
         Conexao conec = new Conexao();
         Connection conexao = conec.abrirConexao();
         
         // Cria um DAO para operações de produto no banco.
         JDBCProdutoDAO jdbcProduto = new JDBCProdutoDAO(conexao);
         boolean retorno = jdbcProduto.inserir(produto);
         
         // Prepara a mensagem de resposta com base no sucesso da operação.
         String msg = "";
         if(retorno) {
             msg = "Produto cadastrado com sucesso!";
         } else {
             msg = "Erro ao cadastrar produto";
         }
         
         // Fecha a conexão com o banco.
         conec.fecharConexao();
         
         // Retorna a resposta.
         return this.buildResponse(msg);
     } catch(Exception e) {
         e.printStackTrace();
         return this.buildErrorResponse(e.getMessage());
     }
 }
 
 // Método para buscar produtos pelo nome.
 @GET
 @Path("/buscar")
 @Consumes("application/*")
 @Produces(MediaType.APPLICATION_JSON)
 public Response buscarPorNome(@QueryParam("valorBusca") String nome) {
     try {
         List<JsonObject> listaProdutos = new ArrayList<JsonObject>();
         
         // Estabelece conexão com o banco de dados.
         Conexao conec = new Conexao();
         Connection conexao = conec.abrirConexao();
         
         // Cria um DAO para operações de produto no banco e realiza a busca por nome.
         JDBCProdutoDAO jdbcProduto = new JDBCProdutoDAO(conexao);
         listaProdutos = jdbcProduto.buscarPorNome(nome);
         
         // Fecha a conexão com o banco.
         conec.fecharConexao();
         
         // Converte a lista de produtos para JSON e retorna.
         String json = new Gson().toJson(listaProdutos);
         return this.buildResponse(json);
     } catch(Exception e) {
         e.printStackTrace();
         return this.buildErrorResponse(e.getMessage());
     }
 }
 
 // Método para excluir um produto pelo ID.
 @DELETE
 @Path("/excluir/{id}")
 @Consumes("application/*")
 public Response excluir(@PathParam("id") int id) {
     try {
         // Estabelece conexão com o banco de dados.
         Conexao conec = new Conexao();
         Connection conexao = conec.abrirConexao();
         
         // Cria um DAO para operações de produto no banco e tenta deletar o produto especificado.
         JDBCProdutoDAO jdbcProduto = new JDBCProdutoDAO(conexao);
         boolean retorno = jdbcProduto.deletar(id);
         
         // Prepara a mensagem de resposta com base no sucesso da operação.
         String msg = "";
         if(retorno) {
             msg = "Produto excluído com sucesso!";
         } else {
             msg = "Erro ao excluir produto.";
         }
         
         // Retorna a resposta.
         return this.buildResponse(msg);
     } catch(Exception e) {
         e.printStackTrace();
         return this.buildErrorResponse(e.getMessage());
     }
 }
 
 // Método para buscar um produto pelo ID.
 @GET
 @Path("/buscarPorId")
 @Consumes("application/*")
 @Produces(MediaType.APPLICATION_JSON)
 public Response buscarPorId(@QueryParam("id") int id) {
     try {
         // Cria um objeto Produto para receber os dados.
         Produto produto = new Produto();
         
         // Estabelece conexão com o banco de dados.
         Conexao conec = new Conexao();
         Connection conexao = conec.abrirConexao();
         
         // Cria um DAO para operações de produto no banco e busca o produto pelo ID.
         JDBCProdutoDAO jdbcProduto = new JDBCProdutoDAO(conexao);
         produto = jdbcProduto.buscarPorId(id);
         
         // Fecha a conexão com o banco.
         conec.fecharConexao();
         
         // Retorna o produto encontrado em formato JSON.
         return this.buildResponse(produto);
     } catch(Exception e) {
         e.printStackTrace();
         return this.buildErrorResponse(e.getMessage());
     }
 }
 
 // Método para alterar as informações de um produto existente.
 @PUT
 @Path("/alterar")
 @Consumes("application/*")
 public Response alterar(String produtoParam) {
     try {
         // Converte o parâmetro JSON recebido em um objeto Produto.
         Produto produto = new Gson().fromJson(produtoParam, Produto.class);
         
         // Estabelece conexão com o banco de dados.
         Conexao conec = new Conexao();
         Connection conexao = conec.abrirConexao();
         
         // Cria um DAO para operações de produto no banco e tenta alterar o produto especificado.
         JDBCProdutoDAO jdbcProduto = new JDBCProdutoDAO(conexao);
         boolean retorno = jdbcProduto.alterar(produto);
         
         // Prepara a mensagem de resposta com base no sucesso da operação.
         String msg = "";
         if(retorno) {
             msg = "Produto alterado com sucesso!";
         } else {
             msg = "Erro ao alterar produto.";
         }
         
         // Fecha a conexão com o banco.
         conec.fecharConexao();
         return this.buildResponse(msg);
     } catch(Exception e) {
         e.printStackTrace();
         return this.buildErrorResponse(e.getMessage());
     }
 }
}
